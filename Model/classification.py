# -*- coding: utf-8 -*-
"""ClassifyProb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/greght/Workshop-Keras-DNN/blob/master/ChallengeProblems/ClassifyProb.ipynb
"""

import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
import numpy as np

import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D



# Download data
#wget --quiet https://raw.githubusercontent.com/greght/Workshop-Keras-DNN/master/ChallengeProblems/iris_test.csv
#wget --quiet https://raw.githubusercontent.com/greght/Workshop-Keras-DNN/master/ChallengeProblems/iris_training.csv

# Import data
dataIn = np.genfromtxt('iris_training.csv',delimiter=',')
x_train = dataIn[:,0:-1]
y_train = keras.utils.to_categorical(dataIn[:,-1], num_classes=3)

dataIn = np.genfromtxt('iris_test.csv',delimiter=',')
x_test = dataIn[:,0:-1]
y_test = keras.utils.to_categorical(dataIn[:,-1], num_classes=3)

# Create model
model = Sequential()
model.add(Dense(units=1000, activation='relu', input_dim=4))
model.add(Dropout(0.5))
model.add(Dense(units=500, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=70, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=3, activation='softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer=keras.optimizers.Adagrad(lr=0.01),
              metrics=['accuracy'])

# Train
history = model.fit(x_train, y_train, validation_data=(x_test,y_test), epochs=100, batch_size=10)

# Plot training & validation accuracy values
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Valid'], loc='lower right')
plt.show()
# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Valid'], loc='upper right')
plt.show()

# Create a prediction set
x_predict = np.array([[6.4, 3.2, 4.5, 1.5],
                      [5.8, 3.1, 5.0, 1.7]], dtype=np.float32)
y_predict = model.predict(x_predict)
print(y_predict)
